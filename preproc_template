#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 14 09:12:24 2019

@author: victortaksheyev
"""

#importing libraries -----------------
import numpy as np
import matplotlib.pyplot as plt
#importing and managing datasets
import pandas as pd

#importing the dataset -----------------
dataset = pd.read_csv('Data.csv')

#independent variable matrix
#all the rows, all the columns -1
X = dataset.iloc[:, :-1].values

#dependent variable vector
Y = dataset.iloc[:, 3].values

#taking care of missing data
from sklearn.preprocessing import Imputer
imputer = Imputer(missing_values ="NaN", strategy="mean", axis=0)
#fitting the imputer onto the columns with missing data
imputer = imputer.fit(X[:, 1:3]) #up to, but not including 3
X[:, 1:3] = imputer.transform(X[:, 1:3])


#encoding categorical data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
X[:, 0] = labelencoder_X.fit_transform(X[:, 0])
onehotencoder = OneHotEncoder(categorical_features = [0])
X = onehotencoder.fit_transform(X).toarray()

labelencoder_Y = LabelEncoder()
Y = labelencoder_Y.fit_transform(Y)

#splitting data into training and test set
from sklearn.cross_validation import train_test_split
#test_size is the percent of dataset that will be used for testing. Remaining is used for training
#current dataset has 10 numbers, so 8 are used for training, 2 for testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

#feature scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
#fit the object to training set first so that training and test set are scaled the same
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)